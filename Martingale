<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Martingale Recovery Pattern — Stakes Table</title>
  <style>
    :root{--bg:#0f172a;--card:#0b1220;--muted:#9aa7bf;--accent:#22c55e}
    body{font-family:Inter,system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;background:linear-gradient(180deg,#07102a 0%, #071829 100%);color:#e6eef8;margin:0;padding:24px}
    .menu{display:flex;align-items:center;gap:16px;margin-bottom:20px}
    .brand{font-weight:700;font-size:18px}
    .subtitle{color:var(--muted);font-size:13px}
    .card{background:rgba(255,255,255,0.03);padding:18px;border-radius:12px;box-shadow:0 6px 18px rgba(2,6,23,0.6)}
    label{display:block;font-size:13px;color:var(--muted);margin-bottom:6px}
    input[type=number]{width:140px;padding:8px;border-radius:8px;border:1px solid rgba(255,255,255,0.06);background:transparent;color:inherit}
    button{margin-left:8px;padding:9px 12px;border-radius:8px;border:none;background:var(--accent);color:#042018;font-weight:600;cursor:pointer}
    table{width:100%;border-collapse:collapse;margin-top:14px;font-size:13px}
    th,td{padding:10px 12px;border-bottom:1px solid rgba(255,255,255,0.03);text-align:right}
    th{color:var(--muted);text-align:left}
    .mono{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, monospace}
    .hint{color:var(--muted);font-size:13px;margin-top:8px}
    @media (max-width:700px){.menu{flex-direction:column;align-items:flex-start}table td,th{font-size:12px;padding:8px}}
  </style>
</head>
<body>
  <div class="menu">
    <div>
      <div class="brand">Martingale Recovery Pattern</div>
      <div class="subtitle">Stakes progression (1–2–3–6–12–...) — shows first 20 rounds</div>
    </div>
    <div style="margin-left:auto" class="card">
      <div style="display:flex;gap:8px;align-items:center">
        <div>
          <label for="base">Base stake (Ksh)</label>
          <input id="base" type="number" min="1" value="100" />
        </div>
        <div>
          <label for="rounds">Rounds (max 20)</label>
          <input id="rounds" type="number" min="1" max="20" value="20" />
        </div>
        <div style="align-self:end">
          <button id="gen">Generate</button>
        </div>
      </div>
    </div>
  </div>

  <div class="card" id="output">
    <div style="display:flex;justify-content:space-between;align-items:center">
      <strong>Stake schedule</strong>
      <div class="hint">Odds assumed: <span class="mono">2.0</span>. Win on bet 1 or 2 => profit = base. Win on bet ≥3 => recovers all previous stakes (net 0).</div>
    </div>

    <table id="table">
      <thead>
        <tr>
          <th>Bet #</th>
          <th>Stake (× base)</th>
          <th>Stake (Ksh)</th>
          <th>Cumulative invested (Ksh)</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>

    <div class="hint">Tip: change the base stake and rounds then click "Generate". Use the table to check bankroll requirements and choose a safe maximum round.</div>
  </div>

<script>
  function generate(base, rounds){
    // stakes as multiples of base
    const stakes = [];
    for(let k=1;k<=rounds;k++){
      if(k===1) stakes.push(1);
      else if(k===2) stakes.push(2);
      else{
        // sum of previous
        const sumPrev = stakes.reduce((a,b)=>a+b,0);
        stakes.push(sumPrev);
      }
    }

    // build table rows
    const tbody = document.querySelector('#table tbody');
    tbody.innerHTML = '';
    let cum = 0;
    for(let i=0;i<stakes.length;i++){
      const mult = stakes[i];
      const stakeAmt = mult * base;
      cum += stakeAmt;
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td style="text-align:left">${i+1}</td>
        <td class="mono">${mult}×</td>
        <td class="mono">${stakeAmt.toLocaleString('en-US')}</td>
        <td class="mono">${cum.toLocaleString('en-US')}</td>
      `;
      tbody.appendChild(tr);
    }
  }

  document.getElementById('gen').addEventListener('click', ()=>{
    const base = Math.max(1, Number(document.getElementById('base').value) || 100);
    let rounds = Math.min(20, Math.max(1, Number(document.getElementById('rounds').value) || 20));
    generate(base, rounds);
  });

  // initial render
  generate(100, 20);
</script>
</body>
</html>
